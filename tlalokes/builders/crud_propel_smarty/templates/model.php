<?
$str = <<<DOT
<?
require_once 'Criteria.php';
require_once 'PropelPager.php';
require_once '{$name}Peer.php';

/**
 * $name Business Model generated by Tlalokes Framework
 *
 * @author Tlalokes Framework
 */
class {$name}Bss {

  /**
   * Returns every elements
   *
   * @return mixed
   */
  public static function getAll ( TlalokesRequest &\$request )
  {
    try {
      \$page = isset( \$request->page ) ? \$request->page : 1;
      \$limit = isset( \$request->limit ) ? \$request->limit : 0;
      if ( \$page > 1 && \$limit == 0 ) {
        throw new Exception( "There is no page \$page" );
      }

      \$pager = new PropelPager( null, '{$name}Peer', 'doSelect', \$page, \$limit );
      if ( !\$pager->getResult() ) {
        throw new Exception( 'There is no data' );
      }

      \$r['pager']['total_pages'] = \$pager->getTotalPages();
      \$r['pager']['total_records_count'] = \$pager->getTotalRecordCount();
      \$r['pager']['current'] = \$pager->getPage();
      \$r['pager']['next'] = \$pager->getNext();
      \$r['pager']['prev'] = \$pager->getPrev();
      \$r['pager']['limit'] = \$limit;

      foreach ( \$pager->getResult() as \$obj ) {
        \$r['data'][] = array(
DOT;

$r = '';
$spc = '                              ';
foreach ( $columns as $key => $column ) {
  // looks for references
  if ( isset( $column->reference ) && $column->reference ) {
    $mod_table = tlalokes_str_change_format( $column->reference->table );
    $mod_key = tlalokes_str_change_format( $column->reference->column );
    $r .= $spc."'{$key}' => \$obj->get{$mod_table}()->get{$mod_key}(),\n";
    unset( $mod_key );
    unset( $mod_table );
  } else {
    $mod_key = tlalokes_str_change_format( $key );
    $r .= $spc."'{$key}' => \$obj->get{$mod_key}(),\n";
  }
}
$r = preg_replace( '/^\s{29}(.*)/', '$1', preg_replace('/(.*),\s*$/','$1',$r) );
unset( $spc );

$str .= $r . <<<DOT
 );
      }

      return \$r;
    } catch ( Exception \$e ) {
      return \$e->getMessage();
    }
  }

  /**
   * Returns the content of an element by it's primary key
   *
   * @return mixed
   */
  public static function getByPK ( \$id )
  {
    try {
      \$obj = {$name}Peer::retrieveByPK( \$id );
      if ( !\$obj ) {
        throw new Exception( "There is no data with key \$id" );
      }

      return array(
DOT;

$r = '';
$spc = '                    ';
foreach ( $columns as $key => $column ) {
  // looks for references
  if ( isset( $column->reference ) && $column->reference ) {
    $mod_table = tlalokes_str_change_format( $column->reference->table );
    $mod_key = tlalokes_str_change_format( $column->reference->column );
    $r .= $spc."'{$key}' => \$obj->get{$mod_table}()->get{$mod_key}(),\n";
    unset( $mod_key );
    unset( $mod_table );
  } else {
    $mod_key = tlalokes_str_change_format( $key );
    $r .= $spc."'{$key}' => \$obj->get{$mod_key}(),\n";
  }
}
$r = preg_replace( '/^\s{19}(.*)/', '$1', preg_replace('/(.*),\s*$/','$1',$r) );
unset( $spc );

$str .= $r . <<<DOT
 );
    } catch ( Exception \$e ) {
      return \$e->getMessage();
    }
  }

  /**
   * Saves a new element
   *
   * @return mixed
   */
  public static function create ( TlalokesRequest &\$request )
  {
    try {
      // TODO: You have to validate the request here
      \$obj = new $name;

DOT;

$r = '';
foreach ( $columns as $key => $column ) {
  $mod_key = tlalokes_str_change_format( $key );
  $r .= "      \$obj->set{$mod_key}( \$request->{$key} );\n";
}

$str .= $r . <<<DOT
      \$obj->save();

      return self::getByPK( \$obj->getId() );
    } catch ( PropelException \$e ) {
      return preg_replace('/\\\t/','',tlalokes_str_sanitize(\$e->getMessage()));
    }
  }

  /**
   * Updates an element
   *
   * @return mixed
   */
  public static function update ( TlalokesRequest &\$request )
  {
    try {
      \$obj = {$name}Peer::retrieveByPK( \$request->_id );
      // TODO: You have to validate here

DOT;

$r = '';
foreach ( $columns as $key => $column ) {
  $mod_key = tlalokes_str_change_format( $key );
  $r .= "      \$obj->set{$mod_key}( \$request->{$key} );\n";
}

$str .= $r . <<<DOT
      \$obj->save();

      return self::getByPK( \$obj->getId() );
    } catch ( PropelException \$e ) {
      return preg_replace('/\\\t/','',tlalokes_str_sanitize( \$e->getMessage() ));
    }
  }

  /**
   * Deletes an element
   *
   * @return mixed
   */
  public static function delete ( TlalokesRequest &\$request )
  {
    try {
      {$name}Peer::doDelete( \$request->_id );

      return self::getAll( \$request );
    } catch ( PropelException \$e ) {
      return preg_replace('/\\\t/','',tlalokes_str_sanitize( \$e->getMessage() ));
    }
  }

  /**
   * Returns an element filtering its contents
   *
   * @return mixed
   */
  public static function filter ( TlalokesRequest &\$request )
  {
    try {
      \$page = isset( \$request->page ) ? \$request->page : 1;
      \$limit = isset( \$request->limit ) ? \$request->limit : 0;

      // set Criteria object
      \$c = new Criteria();
      \$c->setIgnoreCase( true );

      // add elements to criteria

DOT;

$r = '';
foreach ( $columns as $key => $column ) {
  $r .= "      if ( \$request->{$key} ) {\n";
  $mod_key = strtoupper( $key );
  $r .= "        \$c->add( {$name}Peer::{$mod_key}, ";
  switch ( $column->column->type ) {
    case 'integer' :
      $r .= "\$request->{$key}, Criteria::EQUAL );\n";
      break;
    default :
      $r .= "\"%{\$request->{$key}}%\", Criteria::LIKE );\n";
  }
  $r .= "      }\n";
  unset( $mod_key );
}

$str .= $r . <<<DOT

      if ( \$page > 1 && \$limit == 0 ) {
        throw new Exception( "There is no page \$page" );
      }

      \$pager = new PropelPager( \$c, '{$name}Peer', 'doSelect', \$page, \$limit );
      if ( !\$pager->getResult() ) {
        throw new Exception( 'There are no coincidences' );
      }

      \$r['pager']['total_pages'] = \$pager->getTotalPages();
      \$r['pager']['total_records_count'] = \$pager->getTotalRecordCount();
      \$r['pager']['current'] = \$pager->getPage();
      \$r['pager']['next'] = \$pager->getNext();
      \$r['pager']['prev'] = \$pager->getPrev();
      \$r['pager']['limit'] = \$limit;

      foreach ( \$pager->getResult() as \$obj ) {
        \$r['data'][] = array(
DOT;

$r = '';
$spc = '                              ';
foreach ( $columns as $key => $column ) {
  // looks for references
  if ( isset( $column->reference ) && $column->reference ) {
    $mod_table = tlalokes_str_change_format( $column->reference->table );
    $mod_key = tlalokes_str_change_format( $column->reference->column );
    $r .= $spc."'{$key}' => \$obj->get{$mod_table}()->get{$mod_key}(),\n";
    unset( $mod_key );
    unset( $mod_table );
  } else {
    $mod_key = tlalokes_str_change_format( $key );
    $r .= $spc."'{$key}' => \$obj->get{$mod_key}(),\n";
  }
}
$r = preg_replace( '/^\s{29}(.*)/', '$1', preg_replace('/(.*),\s*$/','$1',$r) );
unset( $spc );

$str .= $r . <<<DOT
 );
      }

      return \$r;
    } catch ( Exception \$e ) {
      return \$e->getMessage();
    }
  }
}
DOT;
