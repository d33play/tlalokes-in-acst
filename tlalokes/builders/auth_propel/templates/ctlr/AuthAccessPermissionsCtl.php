<?
require_once 'TlalokesCoreController.php';

/**
 * AuthAccessPermissions Controller generated by Tlalokes Framework
 *
 * @author Tlalokes Framework
 * @ControllerDefinition( default='read', auth )
 */
class AuthAccessPermissionsCtl extends TlalokesCoreController {

  private function getMethodsByController ()
  {
    if ( isset( $this->request->controller ) ) {
      if ( class_exists( $this->request->controller ) ) {
        $reflection = new ReflectionClass( $this->request->controller );
        foreach( $reflection->getMethods() as $method ) {
          if ( $method->isPublic() ) {
            if ( !strstr( $method->name, '__' ) ) {
              $methods[] = $method->name;
            }
          }
        }
        unset( $reflection );
        return $methods;
      }
      return false;
    }
    return false;
  }

  private function getControllers ()
  {
    // get controllers
    $path = $this->path['app'].$this->path['controllers'];
    if ( file_exists( $path ) ) {
      foreach ( glob( $path . '*Ctl.php') as $ctlr ) {
        $ctlrs[] = preg_replace( '/.*\/(.*Ctl).php$/', '$1', $ctlr );
      }
      return $ctlrs;
    }
    return false;
  }

  /**
   * Reads AuthAccessPermissions
   *
   * @ActionDefinition( layout='auth_layout.tpl', zone='content:access_permissions_display;', propel )
   */
  public function read ()
  {
    if ( isset( $this->request->_id ) && $this->request->_id ) {
      $this->response->_id = $this->request->_id;
      $response = AuthAccessPermissionsBss::getByPK( $this->request->_id );
      if ( is_array( $response ) ) {
        $this->response->element = $response;
      } else {
        $this->response->exception = $response;
      }
    } else {
      $response = AuthAccessPermissionsBss::getAll( $this->request );
      if ( is_array( $response['data'] ) ) {
        $this->response->pager = $response['pager'];
        $this->response->list = $response['data'];
        // get reference's content for auth_access_profiles
        $auth_access_profiles = AuthAccessProfilesBss::getAll( $this->request );
        $this->response->auth_access_profiles = $auth_access_profiles['data'];
      } else {
        $this->response->exception = $response;
      }
    }
  }

  /**
   * Create AuthAccessPermissions
   *
   * @ActionDefinition( layout='auth_layout.tpl', zone='content:access_permissions_display;', propel )
   */
  public function create ()
  {
    $response = AuthAccessPermissionsBss::create( $this->request );
    if ( is_array( $response ) ) {
      $this->response->_id = $response['id'];
      $this->response->element = $response;
    } else {
      $this->response->exception = $response;
    }
  }


  /**
   * Update AuthAccessPermissions
   *
   * @ActionDefinition( layout='auth_layout.tpl', zone='content:access_permissions_display;', propel )
   */
  public function update ()
  {
    $response = AuthAccessPermissionsBss::update( $this->request );
    if ( is_array( $response ) ) {
      $this->response->_id = $response['id'];
      $this->response->element = $response;
    } else {
      $this->response->exception = $response;
    }
  }


  /**
   * Delete AuthAccessPermissions
   *
   * @ActionDefinition( layout='auth_layout.tpl', zone='content:access_permissions_display;', propel )
   */
  public function delete ()
  {
    $response = AuthAccessPermissionsBss::delete( $this->request );
    if ( is_array( $response['data'] ) ) {
      $this->response->pager = $response['pager'];
      $this->response->list = $response['data'];
    } else {
      $this->response->exception = $response;
    }
  }

  /**
   * Add AuthAccessPermissions
   *
   * @ActionDefinition( layout='auth_layout.tpl', zone='content:access_permissions_add;', propel )
   */
  public function add ()
  {
    // get reference's content for auth_access_profiles
    $auth_access_profiles = AuthAccessProfilesBss::getAll( $this->request );
    $this->response->auth_access_profiles = $auth_access_profiles['data'];

    // load from application
    $this->response->controllers = $this->getControllers();
    $this->response->_methods = $this->getMethodsByController();

    // load from URI
    if ( isset( $this->request->controller ) && $this->request->controller ) {
      $this->response->req_controller = $this->request->controller;
    }
    if ( isset( $this->request->profile ) && $this->request->profile ) {
      $this->response->prfl = $this->request->profile;
    }
  }


  /**
   * Edit AuthAccessPermissions
   *
   * @ActionDefinition( layout='auth_layout.tpl', zone='content:access_permissions_edit;', propel )
   */
  public function edit ()
  {
    $this->response->_id = $this->request->_id;
    $response = AuthAccessPermissionsBss::getByPK( $this->request->_id );
    if ( is_array( $response ) ) {
      $this->add();
      $this->response->element = $response;

      // get reference's content for auth_access_profiles
      $auth_access_profiles = AuthAccessProfilesBss::getAll( $this->request );
      $this->response->auth_access_profiles = $auth_access_profiles['data'];

      // load from application
      $this->response->controllers = $this->getControllers();
      $this->response->_methods = $this->getMethodsByController();

      // load from URI
      if ( isset( $this->request->controller ) && $this->request->controller ) {
        $this->response->req_controller = $this->request->controller;
      }
    } else {
      $this->response->exception = $response;
    }
  }

  /**
   * Filter AuthAccessPermissions
   *
   * @ActionDefinition( layout='auth_layout.tpl', zone='content:access_permissions_display;', propel )
   */
  public function filter ()
  {
    $response = AuthAccessPermissionsBss::filter( $this->request );
    if ( is_array( $response ) ) {
      $this->response->vars = $_SERVER['QUERY_STRING'];
      $this->response->pager = $response['pager'];
      $this->response->list = $response['data'];
      // get reference's content for auth_access_profiles
      $auth_access_profiles = AuthAccessProfilesBss::getAll( $this->request );
      $this->response->auth_access_profiles = $auth_access_profiles['data'];
    } else {
      $this->response->exception = $response;
      $list = AuthAccessPermissionsBss::getAll( $this->request );
      $this->response->list = $list['pager'];
      $this->response->data = $list['data'];
    }
  }
}
