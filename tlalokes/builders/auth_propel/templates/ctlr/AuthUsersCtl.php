<?php
/**
 * AuthUsers Controller
 * Copyright (C) 2010 Basilio Briceno Hernandez <bbh@tlalokes.org>
 *
 * This file is part of Tlalokes <http://tlalokes.org>.
 *
 * Tlalokes is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation, version 3 of the License.
 *
 * Tlalokes Framework is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Tlalokes Framework.
 * If not, see <http://www.gnu.org/licenses/lgpl.html>.
 */
require_once 'TlalokesCoreController.php';

/**
 * AuthUsers controller generated by Tlalokes's Auth-Propel-Smarty builder
 *
 * @author Basilio Brice&ntilde;o Hern&aacute;ndez <bbh@tlalokes.org>
 * @copyright Copyright &copy; 2010 Basilio Brice&ntilde;o Hern&aacute;ndez
 * @license http://www.gnu.org/licenses/lgpl.html GNU LGPL
 *
 * @ControllerDefinition( default='read', auth )
 */
class AuthUsersCtl extends TlalokesCoreController {

  /**
   * read action allows to display one or more users
   *
   * @ActionDefinition( layout='auth_layout.tpl', zone='content:users_display;', propel )
   */
  public function read ()
  {
    if ( isset( $this->request->_id ) && $this->request->_id ) {
      $this->response->_id = $this->request->_id;
      $response = AuthUsersBss::getByPK( $this->request->_id );
      if ( is_array( $response ) ) {
        $this->response->element = $response;
      } else {
        $this->response->exception = $response;
      }
    } else {
      $response = AuthUsersBss::getAll( $this->request );
      if ( is_array( $response['data'] ) ) {
        $this->response->pager = $response['pager'];
        $this->response->list = $response['data'];
        // get reference's content for auth_roles
        $auth_roles = AuthRolesBss::getAll( $this->request );
        $this->response->auth_roles = $auth_roles['data'];
      } else {
        $this->response->exception = $response;
      }
    }
  }

  /**
   * create action allows to create a new user
   *
   * @ActionDefinition( layout='auth_layout.tpl', zone='content:users_display;', propel )
   */
  public function create ()
  {
    $response = AuthUsersBss::create( $this->request );
    if ( is_array( $response ) ) {
      $this->response->_id = $response['id'];
      $this->response->element = $response;
    } else {
      $this->response->exception = $response;
    }
  }


  /**
   * update action allows to update an existant's user's data
   *
   * @ActionDefinition( layout='auth_layout.tpl', zone='content:users_display;', propel )
   */
  public function update ()
  {
    $response = AuthUsersBss::update( $this->request );
    if ( is_array( $response ) ) {
      $this->response->_id = $response['id'];
      $this->response->element = $response;
    } else {
      $this->response->exception = $response;
    }
  }


  /**
   * delete action allows to remove an existant user
   *
   * @ActionDefinition( layout='auth_layout.tpl', zone='content:users_display;', propel )
   */
  public function delete ()
  {
    $response = AuthUsersBss::delete( $this->request );
    if ( is_array( $response['data'] ) ) {
      $this->response->pager = $response['pager'];
      $this->response->list = $response['data'];
    } else {
      $this->response->exception = $response;
    }
  }

  /**
   * add action allows to display an add view
   *
   * @ActionDefinition( layout='auth_layout.tpl', zone='content:users_add;', propel )
   */
  public function add ()
  {    // get reference's content for auth_roles
    $auth_roles = AuthRolesBss::getAll( $this->request );
    $this->response->auth_roles = $auth_roles['data'];
  }


  /**
   * edit action allows to display an edit view
   *
   * @ActionDefinition( layout='auth_layout.tpl', zone='content:users_edit;', propel )
   */
  public function edit ()
  {
    $this->response->_id = $this->request->_id;
    $response = AuthUsersBss::getByPK( $this->request->_id );
    if ( is_array( $response ) ) {
      $this->add();
      $this->response->element = $response;
      // get reference's content for auth_roles
      $auth_roles = AuthRolesBss::getAll( $this->request );
      $this->response->auth_roles = $auth_roles['data'];
    } else {
      $this->response->exception = $response;
    }
  }

  /**
   * filter allows to display existant users filtering it's data
   *
   * @ActionDefinition( layout='auth_layout.tpl', zone='content:users_display;', propel )
   */
  public function filter ()
  {
    $response = AuthUsersBss::filter( $this->request );
    if ( is_array( $response ) ) {
      $this->response->vars = $_SERVER['QUERY_STRING'];
      $this->response->pager = $response['pager'];
      $this->response->list = $response['data'];
      // get reference's content for auth_roles
      $auth_roles = AuthRolesBss::getAll( $this->request );
      $this->response->auth_roles = $auth_roles['data'];
    } else {
      $this->response->exception = $response;
      $list = AuthUsersBss::getAll( $this->request );
      $this->response->list = $list['pager'];
      $this->response->data = $list['data'];
    }
  }
}
?>
