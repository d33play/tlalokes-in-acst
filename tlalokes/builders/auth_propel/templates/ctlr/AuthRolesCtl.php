<?
require_once 'TlalokesCoreController.php';

/**
 * AuthRoles Controller generated by Tlalokes Framework
 *
 * @author Tlalokes Framework
 * @ControllerDefinition( default='read', auth )
 */
class AuthRolesCtl extends TlalokesCoreController {

  /**
   * Reads AuthRoles
   *
   * @ActionDefinition( layout='auth_layout.tpl', zone='content:roles_display;', propel )
   */
  public function read ()
  {
    if ( isset( $this->request->_id ) && $this->request->_id ) {
      $this->response->_id = $this->request->_id;
      $response = AuthRolesBss::getByPK( $this->request->_id );
      if ( is_array( $response ) ) {
        $this->response->element = $response;
      } else {
        $this->response->exception = $response;
      }
    } else {
      $response = AuthRolesBss::getAll( $this->request );
      if ( is_array( $response['data'] ) ) {
        $this->response->pager = $response['pager'];
        $this->response->list = $response['data'];
      } else {
        $this->response->exception = $response;
      }
    }
  }

  /**
   * Create AuthRoles
   *
   * @ActionDefinition( layout='auth_layout.tpl', zone='content:roles_display;', propel )
   */
  public function create ()
  {
    $response = AuthRolesBss::create( $this->request );
    if ( is_array( $response ) ) {
      $this->response->_id = $response['id'];
      $this->response->element = $response;
    } else {
      $this->response->exception = $response;
    }
  }


  /**
   * Update AuthRoles
   *
   * @ActionDefinition( layout='auth_layout.tpl', zone='content:roles_display;', propel )
   */
  public function update ()
  {
    $response = AuthRolesBss::update( $this->request );
    if ( is_array( $response ) ) {
      $this->response->_id = $response['id'];
      $this->response->element = $response;
    } else {
      $this->response->exception = $response;
    }
  }


  /**
   * Delete AuthRoles
   *
   * @ActionDefinition( layout='auth_layout.tpl', zone='content:roles_display;', propel )
   */
  public function delete ()
  {
    $response = AuthRolesBss::delete( $this->request );
    if ( is_array( $response['data'] ) ) {
      $this->response->pager = $response['pager'];
      $this->response->list = $response['data'];
    } else {
      $this->response->exception = $response;
    }
  }

  /**
   * Add AuthRoles
   *
   * @ActionDefinition( layout='auth_layout.tpl', zone='content:roles_add;', propel )
   */
  public function add ()
  {  }


  /**
   * Edit AuthRoles
   *
   * @ActionDefinition( layout='auth_layout.tpl', zone='content:roles_edit;', propel )
   */
  public function edit ()
  {
    $this->response->_id = $this->request->_id;
    $response = AuthRolesBss::getByPK( $this->request->_id );
    if ( is_array( $response ) ) {
      $this->add();
      $this->response->element = $response;
    } else {
      $this->response->exception = $response;
    }
  }

  /**
   * Filter AuthRoles
   *
   * @ActionDefinition( layout='auth_layout.tpl', zone='content:roles_display;', propel )
   */
  public function filter ()
  {
    $response = AuthRolesBss::filter( $this->request );
    if ( is_array( $response ) ) {
      $this->response->vars = $_SERVER['QUERY_STRING'];
      $this->response->pager = $response['pager'];
      $this->response->list = $response['data'];
    } else {
      $this->response->exception = $response;
      $list = AuthRolesBss::getAll( $this->request );
      $this->response->list = $list['pager'];
      $this->response->data = $list['data'];
    }
  }
}
