<?
require_once 'Criteria.php';
require_once 'PropelPager.php';
require_once 'AuthAccessProfilesRolesPeer.php';

/**
 * AuthAccessProfilesRoles Business Model generated by Tlalokes Framework
 *
 * @author Tlalokes Framework
 */
class AuthAccessProfilesRolesBss {

  /**
   * Returns every elements
   *
   * @return mixed
   */
  public static function getProfilesByRole ( $role )
  {
    try {
      $c = new Criteria;
      $c->add( AuthAccessProfilesRolesPeer::ROLE, $role, Criteria::EQUAL );

      $objs = AuthAccessProfilesRolesPeer::doSelect( $c );

      if ( !$objs ) {
        throw new Exception( "There are no profiles in role $id" );
      }

      foreach ( $objs as $obj ) {
        $r[] = array( 'id' => $obj->getId(),
                      'profile' => $obj->getAuthAccessProfiles()->getId(),
                      'role' => $obj->getAuthRoles()->getId() );
      }

      return $r;
    } catch ( Exception $e ) {
      return $e->getMessage();
    }
  }

  /**
   * Returns every elements
   *
   * @return mixed
   */
  public static function getAll ( TlalokesRequest &$request )
  {
    try {
      $page = isset( $request->page ) ? $request->page : 1;
      $limit = isset( $request->limit ) ? $request->limit : 0;
      if ( $page > 1 && $limit == 0 ) {
        throw new Exception( "There is no page $page" );
      }

      $pager = new PropelPager( null, 'AuthAccessProfilesRolesPeer', 'doSelect', $page, $limit );
      if ( !$pager->getResult() ) {
        throw new Exception( 'There is no data' );
      }

      $r['pager']['total_pages'] = $pager->getTotalPages();
      $r['pager']['total_records_count'] = $pager->getTotalRecordCount();
      $r['pager']['current'] = $pager->getPage();
      $r['pager']['next'] = $pager->getNext();
      $r['pager']['prev'] = $pager->getPrev();
      $r['pager']['limit'] = $limit;

      foreach ( $pager->getResult() as $obj ) {
        $r['data'][] = array( 'id' => $obj->getId(),
                              'profile' => $obj->getAuthAccessProfiles()->getName(),
                              'role' => $obj->getAuthRoles()->getName() );
      }

      return $r;
    } catch ( Exception $e ) {
      return $e->getMessage();
    }
  }

  /**
   * Returns the content of an element by it's primary key
   *
   * @return mixed
   */
  public static function getByPK ( $id )
  {
    try {
      $obj = AuthAccessProfilesRolesPeer::retrieveByPK( $id );
      if ( !$obj ) {
        throw new Exception( "There is no data with key $id" );
      }

      return array( 'id' => $obj->getId(),
                    'profile' => $obj->getAuthAccessProfiles()->getName(),
                    'role' => $obj->getAuthRoles()->getName() );
    } catch ( Exception $e ) {
      return $e->getMessage();
    }
  }

  /**
   * Saves a new element
   *
   * @return mixed
   */
  public static function create ( TlalokesRequest &$request )
  {
    try {
      $obj = new AuthAccessProfilesRoles;
      if ( isset( $request->id ) && $request->id ) {
        $obj->setId( $request->id );
      }
      if ( !isset( $request->profile ) || !$request->profile ) {
        throw new Exception( 'Provide a profile' );
      }
      if ( !isset( $request->role ) || !$request->role ) {
        throw new Exception( 'Provide a role' );
      }
      $obj->setProfile( $request->profile );
      $obj->setRole( $request->role );
      $obj->save();

      return self::getByPK( $obj->getId() );
    } catch ( PropelException $e ) {
      return preg_replace('/\	/','',tlalokes_str_sanitize($e->getMessage()));
    }
  }

  /**
   * Updates an element
   *
   * @return mixed
   */
  public static function update ( TlalokesRequest &$request )
  {
    try {
      $obj = AuthAccessProfilesRolesPeer::retrieveByPK( $request->_id );
      if ( isset( $request->id ) && $request->id ) {
        $obj->setId( $request->id );
      }
      if ( !isset( $request->profile ) || !$request->profile ) {
        throw new Exception( 'Provide a profile' );
      }
      if ( !isset( $request->role ) || !$request->role ) {
        throw new Exception( 'Provide a role' );
      }
      $obj->setProfile( $request->profile );
      $obj->setRole( $request->role );
      $obj->save();

      return self::getByPK( $obj->getId() );
    } catch ( PropelException $e ) {
      return preg_replace('/\	/','',tlalokes_str_sanitize( $e->getMessage() ));
    }
  }

  /**
   * Deletes an element
   *
   * @return mixed
   */
  public static function delete ( TlalokesRequest &$request )
  {
    try {
      AuthAccessProfilesRolesPeer::doDelete( $request->_id );

      return self::getAll( $request );
    } catch ( PropelException $e ) {
      return preg_replace('/\	/','',tlalokes_str_sanitize( $e->getMessage() ));
    }
  }

  /**
   * Returns an element filtering its contents
   *
   * @return mixed
   */
  public static function filter ( TlalokesRequest &$request )
  {
    try {
      $page = isset( $request->page ) ? $request->page : 1;
      $limit = isset( $request->limit ) ? $request->limit : 0;

      // set Criteria object
      $c = new Criteria();
      $c->setIgnoreCase( true );

      // add elements to criteria
      if ( $request->id ) {
        $c->add( AuthAccessProfilesRolesPeer::ID, $request->id );
      }
      if ( $request->profile ) {
        $c->add( AuthAccessProfilesRolesPeer::PROFILE, $request->profile );
      }
      if ( $request->role ) {
        $c->add( AuthAccessProfilesRolesPeer::ROLE, $request->role );
      }

      if ( $page > 1 && $limit == 0 ) {
        throw new Exception( "There is no page $page" );
      }

      $pager = new PropelPager( $c, 'AuthAccessProfilesRolesPeer', 'doSelect', $page, $limit );
      if ( !$pager->getResult() ) {
        throw new Exception( 'There are no coincidences' );
      }

      $r['pager']['total_pages'] = $pager->getTotalPages();
      $r['pager']['total_records_count'] = $pager->getTotalRecordCount();
      $r['pager']['current'] = $pager->getPage();
      $r['pager']['next'] = $pager->getNext();
      $r['pager']['prev'] = $pager->getPrev();
      $r['pager']['limit'] = $limit;

      foreach ( $pager->getResult() as $obj ) {
        $r['data'][] = array( 'id' => $obj->getId(),
                              'profile' => $obj->getAuthAccessProfiles()->getName(),
                              'role' => $obj->getAuthRoles()->getName() );
      }

      return $r;
    } catch ( Exception $e ) {
      return $e->getMessage();
    }
  }
}
