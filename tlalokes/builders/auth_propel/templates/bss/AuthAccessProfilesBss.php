<?
require_once 'Criteria.php';
require_once 'PropelPager.php';
require_once 'AuthAccessProfilesPeer.php';

/**
 * AuthAccessProfiles Business Model generated by Tlalokes Framework
 *
 * @author Tlalokes Framework
 */
class AuthAccessProfilesBss {

  /**
   * Returns every elements
   *
   * @return mixed
   */
  public static function getAll ( TlalokesRequest &$request )
  {
    try {
      $page = isset( $request->page ) ? $request->page : 1;
      $limit = isset( $request->limit ) ? $request->limit : 0;
      if ( $page > 1 && $limit == 0 ) {
        throw new Exception( "There is no page $page" );
      }

      $pager = new PropelPager( null, 'AuthAccessProfilesPeer', 'doSelect', $page, $limit );
      if ( !$pager->getResult() ) {
        throw new Exception( 'There is no data' );
      }

      $r['pager']['total_pages'] = $pager->getTotalPages();
      $r['pager']['total_records_count'] = $pager->getTotalRecordCount();
      $r['pager']['current'] = $pager->getPage();
      $r['pager']['next'] = $pager->getNext();
      $r['pager']['prev'] = $pager->getPrev();
      $r['pager']['limit'] = $limit;

      foreach ( $pager->getResult() as $obj ) {
        $r['data'][] = array( 'id' => $obj->getId(),
                              'name' => $obj->getName(),
                              'description' => $obj->getDescription() );
      }

      return $r;
    } catch ( Exception $e ) {
      return $e->getMessage();
    }
  }

  /**
   * Returns the content of an element by it's primary key
   *
   * @return mixed
   */
  public static function getByPK ( $id )
  {
    try {
      $obj = AuthAccessProfilesPeer::retrieveByPK( $id );
      if ( !$obj ) {
        throw new Exception( "There is no data with key $id" );
      }

      return array( 'id' => $obj->getId(),
                    'name' => $obj->getName(),
                    'description' => $obj->getDescription() );
    } catch ( Exception $e ) {
      return $e->getMessage();
    }
  }

  /**
   * Saves a new element
   *
   * @return mixed
   */
  public static function create ( TlalokesRequest &$request )
  {
    try {
      $obj = new AuthAccessProfiles;
      if ( isset( $request->id ) && $request->id ) {
        $obj->setId( $request->id );
      }
      if ( !isset( $request->name ) || !$request->name ) {
        throw new Exception( 'Provide a name' );
      }
      $obj->setName( $request->name );
      if ( $request->description ) {
        $obj->setDescription( $request->description );
      }
      $obj->save();

      return self::getByPK( $obj->getId() );
    } catch ( PropelException $e ) {
      return preg_replace('/\	/','',tlalokes_str_sanitize($e->getMessage()));
    }
  }

  /**
   * Updates an element
   *
   * @return mixed
   */
  public static function update ( TlalokesRequest &$request )
  {
    try {
      $obj = AuthAccessProfilesPeer::retrieveByPK( $request->_id );
      if ( isset( $request->id ) && $request->id ) {
        $obj->setId( $request->id );
      }
      if ( isset( $request->name ) && $request->name ) {
        $obj->setName( $request->name );
      }
      if ( isset( $request->description ) && $request->description ) {
        $obj->setDescription( $request->description );
      }
      $obj->save();

      return self::getByPK( $obj->getId() );
    } catch ( PropelException $e ) {
      return preg_replace('/\	/','',tlalokes_str_sanitize( $e->getMessage() ));
    }
  }

  /**
   * Deletes an element
   *
   * @return mixed
   */
  public static function delete ( TlalokesRequest &$request )
  {
    try {
      AuthAccessProfilesPeer::doDelete( $request->_id );

      return self::getAll( $request );
    } catch ( PropelException $e ) {
      return preg_replace('/\	/','',tlalokes_str_sanitize( $e->getMessage() ));
    }
  }

  /**
   * Returns an element filtering its contents
   *
   * @return mixed
   */
  public static function filter ( TlalokesRequest &$request )
  {
    try {
      $page = isset( $request->page ) ? $request->page : 1;
      $limit = isset( $request->limit ) ? $request->limit : 0;

      // set Criteria object
      $c = new Criteria();
      $c->setIgnoreCase( true );

      // add elements to criteria
      if ( $request->id ) {
        $c->add( AuthAccessProfilesPeer::ID, $request->id );
      }
      if ( $request->name ) {
        $c->add( AuthAccessProfilesPeer::NAME, "%{$request->name}%", Criteria::LIKE );
      }
      if ( $request->description ) {
        $c->add( AuthAccessProfilesPeer::DESCRIPTION, "%{$request->description}%", Criteria::LIKE );
      }

      if ( $page > 1 && $limit == 0 ) {
        throw new Exception( "There is no page $page" );
      }

      $pager = new PropelPager( $c, 'AuthAccessProfilesPeer', 'doSelect', $page, $limit );
      if ( !$pager->getResult() ) {
        throw new Exception( 'There are no coincidences' );
      }

      $r['pager']['total_pages'] = $pager->getTotalPages();
      $r['pager']['total_records_count'] = $pager->getTotalRecordCount();
      $r['pager']['current'] = $pager->getPage();
      $r['pager']['next'] = $pager->getNext();
      $r['pager']['prev'] = $pager->getPrev();
      $r['pager']['limit'] = $limit;

      foreach ( $pager->getResult() as $obj ) {
        $r['data'][] = array( 'id' => $obj->getId(),
                              'name' => $obj->getName(),
                              'description' => $obj->getDescription() );
      }

      return $r;
    } catch ( Exception $e ) {
      return $e->getMessage();
    }
  }
}
